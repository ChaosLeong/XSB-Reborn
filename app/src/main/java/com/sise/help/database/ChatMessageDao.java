package com.sise.help.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sise.help.database.ChatMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT_MESSAGE.
*/
public class ChatMessageDao extends AbstractDao<ChatMessage, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE";

    /**
     * Properties of entity ChatMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PeerId = new Property(1, String.class, "peerId", false, "PEER_ID");
        public final static Property OtherPeerId = new Property(2, String.class, "otherPeerId", false, "OTHER_PEER_ID");
        public final static Property IsFrom = new Property(3, boolean.class, "isFrom", false, "IS_FROM");
        public final static Property Msg = new Property(4, String.class, "msg", false, "MSG");
        public final static Property Timestamp = new Property(5, long.class, "timestamp", false, "TIMESTAMP");
    };


    public ChatMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PEER_ID' TEXT NOT NULL ," + // 1: peerId
                "'OTHER_PEER_ID' TEXT NOT NULL ," + // 2: otherPeerId
                "'IS_FROM' INTEGER NOT NULL ," + // 3: isFrom
                "'MSG' TEXT NOT NULL ," + // 4: msg
                "'TIMESTAMP' INTEGER NOT NULL );"); // 5: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPeerId());
        stmt.bindString(3, entity.getOtherPeerId());
        stmt.bindLong(4, entity.getIsFrom() ? 1l: 0l);
        stmt.bindString(5, entity.getMsg());
        stmt.bindLong(6, entity.getTimestamp());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatMessage readEntity(Cursor cursor, int offset) {
        ChatMessage entity = new ChatMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // peerId
            cursor.getString(offset + 2), // otherPeerId
            cursor.getShort(offset + 3) != 0, // isFrom
            cursor.getString(offset + 4), // msg
            cursor.getLong(offset + 5) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPeerId(cursor.getString(offset + 1));
        entity.setOtherPeerId(cursor.getString(offset + 2));
        entity.setIsFrom(cursor.getShort(offset + 3) != 0);
        entity.setMsg(cursor.getString(offset + 4));
        entity.setTimestamp(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
